const { Telegraf, Markup } = require('telegraf');
const { scheduleDaily } = require('./scheduler');
const { getUser, saveUser } = require('./db');
const { drawCards } = require('./tarot');
const { Configuration, OpenAIApi } = require('openai');

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required');
if (!OPENAI_API_KEY) throw new Error('OPENAI_API_KEY is required');

const bot = new Telegraf(BOT_TOKEN);

const openai = new OpenAIApi(new Configuration({
    apiKey: OPENAI_API_KEY,
}));

const sessions = {};

bot.start(async (ctx) => {
    await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.`,
    );
    sessions[ctx.from.id] = { step: 'awaiting_birthdate' };
});

bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const text = ctx.message.text.trim();
    const user = getUser(userId) || {};

    if (!sessions[userId]) sessions[userId] = {};

    const session = sessions[userId];

    if (session.step === 'awaiting_birthdate') {
        if (!/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
            return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
        }
        session.birthdate = text;
        await saveUser(userId, { birthdate: text });
        session.step = 'awaiting_cards_count';

        return ctx.reply(
            '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞.',
            Markup.keyboard([['1', '3', '5']])
                .oneTime()
                .resize(),
        );
    }

    if (session.step === 'awaiting_cards_count') {
        const count = parseInt(text, 10);
        if (![1, 3, 5].includes(count)) {
            return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (1, 3 –∏–ª–∏ 5).');
        }
        session.cardsCount = count;
        session.step = 'awaiting_question';

        return ctx.reply('–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞.');
    }

    if (session.step === 'awaiting_question') {
        const today = new Date().toISOString().split('T')[0];

        if (user.lastQuestionDate === today) {
            return ctx.reply('üïØÔ∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.');
        }

        const question = text;
        const cards = drawCards(session.cardsCount || 3);

        await saveUser(userId, { lastQuestionDate: today });

        const prediction = await generateOpenAIPrediction({
            cards,
            question,
            birthdate: user.birthdate || session.birthdate,
        });

        await ctx.reply(`üîÆ –¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥:\n\n${prediction}`);

        delete sessions[userId];
        return;
    }

    return ctx.reply('–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥.');
});

async function generateOpenAIPrediction({ cards, question, birthdate }) {
    const cardsDescription = cards.map((card, i) =>
        `–ö–∞—Ä—Ç–∞ ${i + 1}: ${card.name} ‚Äî ${card.meaning}`
    ).join('\n');

    const systemPrompt = `
–¢—ã ‚Äî –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç—á–∏–∫. –î–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ, –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –¢–∞—Ä–æ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏ –∏ –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ.
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${birthdate}
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${question}
–ö–∞—Ä—Ç—ã:
${cardsDescription}
`;

    try {
        const completion = await openai.createChatCompletion({
            model: 'gpt-4o-mini',
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: '–°—Ñ–æ—Ä–º–∏—Ä—É–π —É—Ç–æ–Ω—á–µ–Ω–Ω–æ–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.' },
            ],
            max_tokens: 500,
            temperature: 0.8,
        });
        return completion.data.choices[0].message.content.trim();
    } catch (err) {
        console.error('OpenAI error:', err);
        return generateFallbackPrediction({ cards, question, birthdate });
    }
}

function generateFallbackPrediction({ cards, question, birthdate }) {
    const affirmations = [
        "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ø–æ–∫–æ—è –∏ —è—Å–Ω–æ—Å—Ç–∏.",
        "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ—è –¥—É—à–∞ —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è –Ω–∞–≤—Å—Ç—Ä–µ—á—É —Å–≤–µ—Ç—É.",
        "–ë—É–¥—É—â–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —à–∞–≥.",
        "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –∫–∞–∂–µ—à—å—Å—è, –∏ –º—É–¥—Ä–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å.",
    ];

    const intro = `‚ú® –¢–≤–æ—è –¥—É—à–∞ –∑–∞–¥–∞–ª–∞ –≤–æ–ø—Ä–æ—Å: *${question}*.\n–ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏.\n`;
    const cardLines = cards.map(card => `üÉè *${card.name}*: ${card.meaning}`).join('\n');
    const affirmation = affirmations[Math.floor(Math.random() * affirmations.length)];

    return `${intro}\n${cardLines}\n\nüîÆ _${affirmation}_`;
}

bot.launch();
scheduleDaily(bot);

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è scheduler.js
module.exports = {
    generateOpenAIPrediction,
    generateFallbackPrediction,
};
