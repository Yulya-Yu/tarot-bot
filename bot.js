const { Telegraf } = require('telegraf');
const { Markup } = require('telegraf');
const { drawCards } = require('./tarot');
const { interpretCard } = require('./messages');
const { initDB, saveUser, getUser } = require('./db');
const { scheduleDaily } = require('./scheduler');

const bot = new Telegraf('YOUR_BOT_TOKEN');


(async () => {
    await initDB();
    scheduleDaily(bot);

    bot.start(async (ctx) => {
        await ctx.reply("–ü—Ä–∏–≤–µ—Ç üåí –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):");
        await saveUser(ctx.from.id, { step: 'awaiting_birthdate' });
    });

    bot.on('text', async (ctx) => {
        const user = getUser(ctx.from.id);
        const text = ctx.message.text;

        if (user?.step === 'awaiting_birthdate') {
            await saveUser(ctx.from.id, { birthdate: text, step: 'ready' });
            return ctx.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –∫–∞—Ä—Ç—ã, –≤–æ–ø—Ä–æ—Å: –ß—Ç–æ –º–µ–Ω—è –∂–¥—ë—Ç?)",             Markup.keyboard([
                ['1 –∫–∞—Ä—Ç–∞', '3 –∫–∞—Ä—Ç—ã', '5 –∫–∞—Ä—Ç']
            ]).oneTime().resize());
        }

        const match = text.match(/(\d+).*(–≤–æ–ø—Ä–æ—Å|question):?\s*(.+)/i);
        if (match) {
            const count = Math.min(parseInt(match[1]), 5);
            const question = match[3];
            const cards = drawCards(count);
            const interpretations = cards.map(c => interpretCard(c, question)).join("\n\n");
            await ctx.replyWithMarkdown(`‚ú® *–¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥:*\n\n${interpretations}`);
        } else {
            ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `3 –∫–∞—Ä—Ç—ã, –≤–æ–ø—Ä–æ—Å: –ß—Ç–æ –º–µ–Ω—è –∂–¥—ë—Ç?`");
        }
    });

    bot.launch();
})();