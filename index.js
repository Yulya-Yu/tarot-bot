const TelegramBot = require('node-telegram-bot-api');
const schedule = require('node-schedule');
const { Low, JSONFile } = require('lowdb');
const { v4: uuid } = require('uuid');
const fs = require('fs');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = '7835002316:AAEFLbkmIZxOsbwjYiN95CoxojIWcVgRzec';
const bot = new TelegramBot(token, { polling: true });

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const adapter = new JSONFile('db.json');
const db = new Low(adapter);
await db.read();
db.data ||= { users: [] };
await db.write();

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç
const deck = [
    "The Fool", "The Magician", "The High Priestess", "The Empress", "The Emperor",
    "The Hierophant", "The Lovers", "The Chariot", "Strength", "The Hermit",
    "Wheel of Fortune", "Justice", "The Hanged Man", "Death", "Temperance",
    "The Devil", "The Tower", "The Star", "The Moon", "The Sun", "Judgement", "The World"
];

// –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç
function generateInterpretation(card, question) {
    return `üåå *${card}*  
  _–û—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å "${question}"_  
  ${card === 'The Tower' ?
        "–í —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ. –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –ø–æ—Ä—Ç–∞–ª." :
        `–≠–Ω–µ—Ä–≥–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –≤–µ–¥—ë—Ç —Ç–µ–±—è –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—é. –ü–æ–≤—Ç–æ—Ä—è–π:  
    *"–Ø –æ—Ç–∫—Ä—ã—Ç–∞ –º–∏—Ä—É, –∏ –º–∏—Ä –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –º–µ–Ω—è."*`}
  `;
}

// –ö–æ–º–∞–Ω–¥—ã
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const user = db.data.users.find(u => u.chatId === chatId);
    if (!user) {
        db.data.users.push({ chatId, questionCount: 0, birthdate: null });
        await db.write();
    }
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞—Ä–æ-–±–æ—Ç–∞. –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)');
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;

    if (dateRegex.test(text)) {
        const user = db.data.users.find(u => u.chatId === chatId);
        if (user) {
            user.birthdate = text;
            await db.write();
            bot.sendMessage(chatId, '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /question');
        }
    }
});

// –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.onText(/\/question/, (msg) => {
    const chatId = msg.chat.id;
    const user = db.data.users.find(u => u.chatId === chatId);
    if (!user || user.questionCount >= 1) {
        return bot.sendMessage(chatId, '–¢—ã —É–∂–µ –∑–∞–¥–∞–≤–∞–ª–∞ –≤–æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è. –ù–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ‚Äî –∑–∞–≤—Ç—Ä–∞ üåí');
    }

    bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –≤—ã—Ç—è–Ω—É—Ç—å? (1-5)', {
        reply_markup: {
            keyboard: [['1', '3', '5']],
            one_time_keyboard: true
        }
    });

    bot.once('message', async (msg) => {
        const count = parseInt(msg.text);
        if (![1, 3, 5].includes(count)) return;

        bot.sendMessage(chatId, '–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:');
        bot.once('message', async (msg) => {
            const question = msg.text;
            const shuffled = deck.sort(() => 0.5 - Math.random()).slice(0, count);
            const responses = shuffled.map(card => generateInterpretation(card, question));
            bot.sendMessage(chatId, responses.join('\n\n'), { parse_mode: 'Markdown' });

            user.questionCount += 1;
            await db.write();
        });
    });
});

/// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –≤ 9:00
schedule.scheduleJob('0 9 * * *', async () => {
    for (const user of db.data.users) {
        const dailyCard = deck[Math.floor(Math.random() * deck.length)];
        const message = `‚òÄÔ∏è *–¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*  
    –ö–∞—Ä—Ç–∞ –¥–Ω—è: *${dailyCard}*  
    ${generateInterpretation(dailyCard, '–ö–∞–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π –≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –¥–µ–Ω—å?')}`;

        bot.sendMessage(user.chatId, message, { parse_mode: 'Markdown' });
        user.questionCount = 0; // —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞
    }
    await db.write();
});